var DigitalInput = require('./base/digitalSensor');

const buttonMode = {
    UP: 0,
    DOWN: 1
}

var mode = buttonMode.UP; // not pressed

//var pressedDateTime;

// digital button, can throw singlepress and longpress events
function DigitalButton(pin, longPressDelay) {
    DigitalInput.apply(this, Array.prototype.slice.call(arguments));
    this.longPressDelay = longPressDelay || 1100;
    this.on('change', function (res) {

      // script is in 'un-pressed' state
      if (mode === buttonMode.UP) {
        console.log('1-1) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);

        // user presses the button for the first time
        if (res == 1) {
          // console.log('2) res: ' + res);
          console.log('2-1) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


//          pressedDateTime = new Date();
          // console.log('2) pressedDateTime: ' + pressedDateTime);
//          console.log('2-2) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


          mode = buttonMode.DOWN;
          // console.log('2) mode: ' + mode);
          console.log('2-3) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


        }
      }

      // script is in 'pressed' state
      else if (mode === buttonMode.DOWN) {
        // console.log('3) mode: ' + mode);
        console.log('3-1) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);

        // button debouncing - this force-resets the script to its "un-pressed"
        // state if the button is released or "rings" (switches rapidly on and
        // off very rapidly) before normal reset following the 'millisecond'
        // calculation. Otherwise, 'pressedDateTime' may be evaluated as
        // 'undefined', and crash Node.js.
        if (pressedDateTime == undefined) {
//          mode = buttonMode.UP;
          var pressedDateTime = new Date();

        } else {
          // user is holding the button
          if (res == 1) {
            // do nothing
            // console.log('4) res: ' + res);
            console.log('4-1) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


          }

          // user releases the button
          else if (res == 0) {
            // console.log('5) res: ' + res);
            console.log('5-1) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


            var currentDateTime = new Date();
            // console.log('5) currentDateTime: ' + currentDateTime);
            console.log('5-2) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


            var milliseconds = (currentDateTime.getTime() - pressedDateTime.getTime());
            // console.log('5) milliseconds: ' + milliseconds);
            console.log('5-3) \n\t\t mode: \t\t' + mode + '\n\t\t res: \t\t' + res + '\n\t pressedDateTime: \t' + pressedDateTime + '\n\t currentDateTime: \t' + currentDateTime + '\n\t milliseconds: \t\t' + milliseconds);


            // if button was held down for less than longPressDelay, in milliseconds
            if (milliseconds <= this.longPressDelay) {
              this.emit('down', 'singlepress');
              console.log('6-1) singlepress');

            } else {
              this.emit('down', 'longpress');
              console.log('7-1) longpress');

            }
            // script resets to 'un-pressed' state
            mode = buttonMode.UP;
          }
        }

      }


//
// //	var currentDateTime;
// //	var milliseconds;
//         //user presses the button for the first time
//         if (res == 1 && mode === buttonMode.UP) {
//             var pressedDateTime = new Date();
//             mode = buttonMode.DOWN;
//             //return;
//             break;
//         }
//
// /*
// 	else if (pressedDateTime == null) {
// 	    pressedDateTime = new Date();
// 	    mode = buttonMode.DOWN;
// 	    return;
// 	}
// */
//
//         //user continues to press the button
//         else if (res == 1 && mode === buttonMode.DOWN) {
//             //do nothing
//             //return;
//             break;
//         }
//
//         //res == 0 so user has lifted her finger
//         else if (res == 0 && mode === buttonMode.DOWN) {
//             var currentDateTime = new Date();
//             var milliseconds = (currentDateTime.getTime() - pressedDateTime.getTime());
//             //if less than longPressDelay milliseconds
//             if (milliseconds <= this.longPressDelay) {
//                 this.emit('down', 'singlepress');
//             } else {
//                 this.emit('down', 'longpress');
//             }
//             //reset the mode
//             mode = buttonMode.UP;
//             //return;
//             break;
//         }
    });
}

DigitalButton.prototype = new DigitalInput();

module.exports = DigitalButton;
